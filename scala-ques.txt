Easy - 

1. Given a list of integers, write a function to return a new list where each element is doubled, but only if the element is positive. For example:

Input: List(1, -2, 3, -4, 5) Output: List(2, -2, 6, -4, 10)

Solution - 
def doublePositive(ints: List[Int]): List[Int] = {
  ints.filter(_ > 0).map(_ * 2)
}


2. Given a list of integers, write a function to return a new list where each element is the sum of itself and all previous elements in the original list.

For example, given:

val nums = List(1, 2, 3, 4)

Your function should return:

List(1, 3, 6, 10)

Solution - 
def cumulativeSum(nums: List[Int]): List[Int] = {
  nums.scanLeft(0)(_ + _).tail
}


3.  Sum of Even Numbers - Write a function to calculate the sum of even numbers in a list.

Solution:

def sumOfEvenNumbers(lst: List[Int]): Int = lst.filter(_ % 2 == 0).sum

4. Factorial Using Tail Recursion - Implement a tail-recursive function to compute the factorial of a number.

Solution:

def factorial(n: Int): Int = {
  @scala.annotation.tailrec
  def factorialHelper(acc: Int, x: Int): Int = {
    if (x <= 1) acc
    else factorialHelper(acc * x, x - 1)
  }
  
  factorialHelper(1, n)
}

5. Map Function Implementation - Create a custom map function that works similar to the built-in map function.

Solution:

def customMap[A, B](list: List[A], f: A => B): List[B] = {
  list match {
    case Nil => Nil
    case head :: tail => f(head) :: customMap(tail, f)
  }
}


Medium - 

6.  Function Composition - Compose two functions f and g to create a new function h where h(x) = f(g(x)).

Solution:

def f(x: Int): Int = x * 2
def g(x: Int): Int = x + 3

val h = f _ compose g _

7. Implement Flatten - Implement a function that flattens a nested list structure.

Solution: 
def flatten(lst: List[Any]): List[Any] = lst flatMap {
  case list: List[_] => flatten(list)
  case element => List(element)
}

8. Currying and Partial Application - Create a curried function sum that takes one or two arguments and returns the sum accordingly.

Solution: def sum(a: Int)(b: Option[Int] = None): Int = b match {
  case Some(value) => a + value
  case None => a
}

9. Given a list of integers, write a function to find all pairs of numbers that sum to a specified target value. The function should return a list of tuples containing the pairs of numbers. Make sure your solution is immutable, uses higher order functions, currying, and pattern matching where appropriate.

For example, given the list List(1, 2, 3, 4, 5) and a target sum of 5, the function should return List((1,4), (2,3)).

Solution:

def findPairs(nums: List[Int], target: Int): List[(Int, Int)] = {

  def addToTarget(num: Int)(remaining: List[Int]): List[(Int, Int)] = {
    remaining match {
      case Nil => Nil
      case head :: tail if num + head == target => (num, head) :: Nil
      case head :: tail => addToTarget(num)(tail)
    }
  }

  nums.foldLeft(List[(Int, Int)]()) { 
    case (acc, num) => acc ++ nums.map(addToTarget(num))
  }

}

val nums = List(1, 2, 3, 4, 5)
val target = 5

println(findPairs(nums, target)) 
// List((1,4), (2,3))


Hard - 

10.  Memoization - Fibonacci Series - Implement a memoized version of the Fibonacci series function to improve performance.

Solution:

val fibonacci: Int => BigInt = {
  var memo = scala.collection.mutable.Map[Int, BigInt]()
  def fib(n: Int): BigInt = memo.getOrElseUpdate(n, n match {
    case 0 | 1 => BigInt(n)
    case _ => fib(n - 1) + fib(n - 2)
  })
  fib
}

11. Custom FoldLeft Function - Implement a custom foldLeft function for lists.

Solution:

def customFoldLeft[A, B](list: List[A], z: B)(f: (B, A) => B): B = {
  list match {
    case Nil => z
    case head :: tail => customFoldLeft(tail, f(z, head))(f)
  }
}
